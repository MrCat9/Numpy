# -*- coding: utf-8 -*-
# 摘自 https://zhuanlan.zhihu.com/p/24309547
import numpy as np

# 对于array，默认执行对位运算。涉及到多个array的对位运算需要array的维度一致，
# 如果一个array的维度和另一个array的子维度一致，则在没有对齐的维度上分别执行对位运算，
# 这种机制叫做广播（broadcasting）

a = np.array([
    [1, 2, 3],
    [4, 5, 6]
])

b = np.array([
    [1, 2, 3],
    [1, 2, 3]
])

print("a + b = ")
print(a + b)
'''
a + b = 
[[2 4 6]
 [5 7 9]]
'''

print("----------------------")

print("a - b = ")
print(a - b)
'''
a - b = 
[[0 0 0]
 [3 3 3]]
'''

print("----------------------")

print("a * b = ")
print(a * b)
'''
a * b = 
[[ 1  4  9]
 [ 4 10 18]]
'''

print("----------------------")

print("a / b = ")
print(a / b)
'''
a / b = 
[[1.  1.  1. ]
 [4.  2.5 2. ]]
'''

print("----------------------")

print("a ** 2 = ")
print(a ** 2)       # 平方
'''
a ** 2 = 
[[ 1  4  9]
 [16 25 36]]
'''

print("----------------------")

print("a ** b = ")
print(a ** b)
'''
a ** b = 
[[  1   4  27]
 [  4  25 216]]
'''

print("----------------------")

c = np.array([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
    [10, 11, 12]
])
d = np.array([2, 2, 2])

print("c + d = ")
print(c + d)        # 广播机制让计算的表达式保持简洁，d和c的每一行分别进行运算
'''
c + d = 
[[ 3  4  5]
 [ 6  7  8]
 [ 9 10 11]
 [12 13 14]]
'''

print("----------------------")

print("c * d = ")
print(c * d)        # 广播机制让计算的表达式保持简洁，d和c的每一行分别进行运算
'''
c * d = 
[[ 2  4  6]
 [ 8 10 12]
 [14 16 18]
 [20 22 24]]
'''

print("----------------------")

print("c - 1 = ")
print(c - 1)        # 1和c的每个元素分别进行运算
'''
c - 1 = 
[[ 0  1  2]
 [ 3  4  5]
 [ 6  7  8]
 [ 9 10 11]]
'''

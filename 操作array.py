# -*- coding: utf-8 -*-
# 摘自 https://zhuanlan.zhihu.com/p/24309547
import numpy as np

a = np.arange(24).reshape((2, 3, 4))
print(a)
'''
[[[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]

 [[12 13 14 15]
  [16 17 18 19]
  [20 21 22 23]]]
'''
b1 = a[1][1][1]
print(b1)        # 17
b2 = a[0][1][2]
print(b2)        # 6

c = a[:, 2, :]   # 用:表示当前维度上所有下标
print(c)
'''
[[ 8  9 10 11]
 [20 21 22 23]]
'''

d = a[:, :, 1]
print(d)
'''
[[ 1  5  9]
 [13 17 21]]
'''

e = a[..., 1]       # 用...表示没有明确指出的维度
print(e)
'''
[[ 1  5  9]
 [13 17 21]]
'''

f = a[:, 1:, 1:-1]
print(f)
'''
[[[ 5  6]
  [ 9 10]]

 [[17 18]
  [21 22]]]
'''

print("----------------------")

g = np.split(np.arange(9), 3)       # 平均分成3份
print(g)
# [array([0, 1, 2]), array([3, 4, 5]), array([6, 7, 8])]

print("----------------------")

h = np.split(np.arange(9), [2, -3])     # 按照下标位置进行划分
print(h)
# [array([0, 1]), array([2, 3, 4, 5]), array([6, 7, 8])]

print("----------------------")

l0 = np.arange(6).reshape((2, 3))
l1 = np.arange(6, 12).reshape((2, 3))
print(l0)
'''
[[0 1 2]
 [3 4 5]]
'''
print(l1)
'''
[[ 6  7  8]
 [ 9 10 11]]
'''

'''
vstack是指沿着纵轴拼接两个array，vertical
hstack是指沿着横轴拼接两个array，horizontal
更广义的拼接用concatenate实现，horizontal后的两句依次等效于vstack和hstack
stack不是拼接而是在输入array的基础上增加一个新的维度
'''

m = np.vstack((l0, l1))
print(m)
'''
[[ 0  1  2]
 [ 3  4  5]
 [ 6  7  8]
 [ 9 10 11]]
'''

p = np.hstack((l0, l1))
print(p)
'''
[[ 0  1  2  6  7  8]
 [ 3  4  5  9 10 11]]
'''

q = np.concatenate((l0, l1))        # 默认竖着拼接
print(q)
'''
[[ 0  1  2]
 [ 3  4  5]
 [ 6  7  8]
 [ 9 10 11]]
'''

r1 = np.concatenate((l0, l1), axis=-1)
print(r1)       # axis=-2，-1，1横着拼。axis=0竖着拼。axis=2报错
'''
[[ 0  1  2  6  7  8]
 [ 3  4  5  9 10 11]]
'''

r2 = np.concatenate((l0, l1), axis=0)
print(r2)
'''
[[ 0  1  2]
 [ 3  4  5]
 [ 6  7  8]
 [ 9 10 11]]
'''

s = np.stack((l0, l1))
print(s)
'''
[[[ 0  1  2]
  [ 3  4  5]]

 [[ 6  7  8]
  [ 9 10 11]]]
'''

s2 = np.stack((l0, l1,l0))
print(s2)
'''
[[[ 0  1  2]
  [ 3  4  5]]

 [[ 6  7  8]
  [ 9 10 11]]

 [[ 0  1  2]
  [ 3  4  5]]]
'''

print("----------------------")

print("s = ")
print(s)
'''
[[[ 0  1  2]
  [ 3  4  5]]

 [[ 6  7  8]
  [ 9 10 11]]]
'''
t = s.transpose((2, 0, 1))      # 按指定轴进行转置
print("t = ")
print(t)
'''
[[[ 0  3]
  [ 6  9]]

 [[ 1  4]
  [ 7 10]]

 [[ 2  5]
  [ 8 11]]]
'''

t2 = s.transpose((1, 0, 2))      # 按指定轴进行转置
print("t2 = ")
print(t2)
'''
[[[ 0  1  2]
  [ 6  7  8]]

 [[ 3  4  5]
  [ 9 10 11]]]
'''

print("----------------------")

print("a[0] = ")
print(a[0])
'''
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
'''

# 默认转置将维度倒序，对于2维就是横纵轴互换
u = a[0].transpose()    # 或者u=a[0].T也是获得转置
print("u = ")
print(u)
'''
[[ 0  4  8]
 [ 1  5  9]
 [ 2  6 10]
 [ 3  7 11]]
'''
print("u.T = ")
print(u.T)
'''
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
'''

print("----------------------")

print("u = ")
print(u)
'''
[[ 0  4  8]
 [ 1  5  9]
 [ 2  6 10]
 [ 3  7 11]]
'''

# 逆时针旋转90度，第二个参数是旋转次数
v = np.rot90(u, 3)
print("v = ")
print(v)
'''
[[ 3  2  1  0]
 [ 7  6  5  4]
 [11 10  9  8]]
'''

v2 = np.rot90(u, 2)
print("v2 = ")
print(v2)
'''
[[11  7  3]
 [10  6  2]
 [ 9  5  1]
 [ 8  4  0]]
'''

print("----------------------")

print("u = ")
print(u)
'''
[[ 0  4  8]
 [ 1  5  9]
 [ 2  6 10]
 [ 3  7 11]]
'''

# 沿纵轴左右翻转
w = np.fliplr(u)
print("w = ")
print(w)
'''
[[ 8  4  0]
 [ 9  5  1]
 [10  6  2]
 [11  7  3]]
'''

print("----------------------")

print("u = ")
print(u)
'''
[[ 0  4  8]
 [ 1  5  9]
 [ 2  6 10]
 [ 3  7 11]]
'''

# 沿水平轴上下翻转
x = np.flipud(u)
print("x = ")
print(x)
'''
[[ 3  7 11]
 [ 2  6 10]
 [ 1  5  9]
 [ 0  4  8]]
'''

print("----------------------")

print("u = ")
print(u)
'''
[[ 0  4  8]
 [ 1  5  9]
 [ 2  6 10]
 [ 3  7 11]]
'''

# 按照一维顺序滚动位移
y = np.roll(u, 1)
print("y = ")
print(y)
'''
[[11  0  4]
 [ 8  1  5]
 [ 9  2  6]
 [10  3  7]]
'''

print("----------------------")

print("u = ")
print(u)
'''
[[ 0  4  8]
 [ 1  5  9]
 [ 2  6 10]
 [ 3  7 11]]
'''

# 按照指定轴滚动位移
z = np.roll(u, 1, axis=1)
print("z = ")
print(z)
'''
[[ 8  0  4]
 [ 9  1  5]
 [10  2  6]
 [11  3  7]]
'''

print("----------------------")
